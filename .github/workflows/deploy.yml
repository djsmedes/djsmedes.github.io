name: Deploy Pages site

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    # Keep the defaults and add "ready_for_review"
    types: [ "opened", "synchronize", "reopened", "ready_for_review" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write      # allow deployment to Pages
  id-token: write   # required for OIDC

# Cancel in-progress runs if a new one starts on the same ref (branch/PR)
concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    if: ${{ github.event.pull_request.draft == false || github.event_name == 'push' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        # You may pin to the exact commit or the version.
        # uses: denoland/setup-deno@e95548e56dfa95d4e1a28d6f422fafe75c4c26fb
        uses: denoland/setup-deno@v2.0.3
        with:
          # The Deno version to install. Can be a semver version of a stable release, "canary" for the latest canary, "lts" for the latest LTS, or the Git hash of a specific canary release.
          deno-version: "2.3" # TODO - at some point figure out how to pin this and local expected version together
          # File containing the Deno version to install such as .dvmrc or .tool-versions.
          # deno-version-file: # optional
          # The name to use for the binary.
          # deno-binary-name: # optional, default is deno
          # Cache downloaded modules & packages automatically in GitHub Actions cache.
          cache: true # optional, default is false
          # A hash used as part of the cache key, which defaults to a hash of the deno.lock files.
          # cache-hash: # optional

      # might want linting and testing at some point
      # - name: Format check
      #   run: deno fmt --check

      # - name: Lint
      #   run: deno lint

      # - name: Run tests
      #   run: deno test --allow-all --lock=deno.lock --lock-write

      # Runs a single command using the runners shell
      - name: Generate Astro artifact
        run: deno task build

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          name: github-pages # must correspond with `artifact_name` in deploy step
          # Path of the directory containing the static assets.
          path: dist/ # this is where Astro puts them
          # Duration after which artifact will expire in days.
          # retention-days: # optional, default is 1

  deploy:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: Deploy GitHub Pages site
        uses: actions/deploy-pages@v4.0.5
        with:
          token: ${{ github.token }}
          artifact_name: github-pages # must correspond with `name` in upload step
          # additional options I might want...
          #
          # Time in milliseconds after which to timeout and cancel the deployment (default: 10 minutes)
          # timeout: # optional, default is 600000
          #
          # Maximum number of status report errors before cancelling a deployment (default: 10)
          # error_count: # optional, default is 10
          #
          # Time in milliseconds between two deployment status report (default: 5 seconds)
          # reporting_interval: # optional, default is 5000
